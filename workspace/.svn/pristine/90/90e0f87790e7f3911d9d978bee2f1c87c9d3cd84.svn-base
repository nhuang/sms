@model IEnumerable<FVTS.Models.ShiftRecordModels>

<strong>Shift History</strong>
@{

    var roles = (SimpleRoleProvider)Roles.Provider;

    String PlateMessage = "";
    if (ViewBag.PlateMessage != null)
    {
        PlateMessage = ViewBag.PlateMessage;
    }
}

<h5 style="color: red">@PlateMessage</h5>

@(Html.Kendo().Grid(Model)
    .Name("ShiftRecords")
    .Columns(columns =>
    {
        columns.Bound(e => e.volunteerId).Visible(false);
        columns.Bound(e => e.recordId).Visible(false);
        columns.Bound(e => e.teamName).Width(200).ClientTemplate("<strong>#: teamName #</strong>").Title("Team Name");
        columns.Bound(e => e.startOn).Format("{0:MMM dd yyyy hh:mm tt}").Title("Start On");
        columns.Bound(e => e.endOn).Format("{0:MMM dd yyyy hh:mm tt}").Title("End On");
        columns.Bound(e => e.earnedBucks).Format("{0:C}").Title("Fringe Bucks");
        columns.Bound(e => e.earnHours).Title("Hours");
        if (WebSecurity.IsAuthenticated && (roles.GetRolesForUser(WebSecurity.CurrentUserName).Contains("Administrator") || roles.GetRolesForUser(WebSecurity.CurrentUserName).Contains("Coordinator")))
        {
            columns.Command(command =>
            {
                command.Custom("Edit").Click("editRecord");
                command.Destroy();
            }).Width(200);
        }
    })
    .HtmlAttributes(new { style = "height: 400px" })
    .Pageable(pager => pager
        .Refresh(true)
     )
    .Resizable(resize => resize.Columns(true))
    .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(true)
        .Sort(sort =>
        {
            // Sort by UnitsInStock in descending order
            sort.Add(p => p.recordId).Descending();
        })
        .Events(events => events.Error("error_handler"))
        .Model(model =>
            {
                //The unique identifier (primary key) of the model is the ProductID property
                model.Id(p => p.recordId);
                // Declare a model field and make it readonly
                model.Field(p => p.earnedBucks).Editable(false);
                model.Field(p => p.earnHours).Editable(false);
            })
        .Read("ShiftRecord_Read", "Volunteer")
        .Destroy("ShiftRecord_Delete", "Volunteer").Events(events => events.Sync("end_handler"))
        
    )

)

<script type="text/javascript">
    var chaged = false;
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function end_handler(e) {
        alert("Updated!");
        refresh_handler();
    }

    function refresh_handler() {
        $("#ShiftRecords").data("kendoGrid").dataSource.read();
    }

    function editRecord(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var id = dataItem.recordId;
        window.location.href = "@Url.Action("VolunteerHistoryEdit", "Volunteer")" + "/" + id;
    }
</script>
